apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "contextstream.fullname" . }}-app
  labels:
    {{- include "contextstream.labels" . | nindent 4 }}
    app.kubernetes.io/component: app
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount.app }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "contextstream.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: app
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      labels:
        {{- include "contextstream.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: app
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "contextstream.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
        - name: wait-for-db
          image: busybox:1.35
          command: ['sh', '-c', 'until nc -z {{ include "contextstream.postgresql.host" . }} {{ include "contextstream.postgresql.port" . }}; do echo waiting for database; sleep 2; done']
        - name: wait-for-redis
          image: busybox:1.35
          command: ['sh', '-c', 'until nc -z {{ include "contextstream.redis.host" . }} {{ include "contextstream.redis.port" . }}; do echo waiting for redis; sleep 2; done']
        - name: run-migrations
          image: "{{ .Values.image.registry }}/{{ .Values.image.repository }}:app-{{ .Values.image.tag | default .Chart.AppVersion }}"
          command: ["npx", "prisma", "migrate", "deploy"]
          env:
            - name: DATABASE_URL
              value: {{ include "contextstream.database.url" . }}
          envFrom:
            - configMapRef:
                name: {{ include "contextstream.fullname" . }}
            - secretRef:
                name: {{ include "contextstream.fullname" . }}
      containers:
        - name: app
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.registry }}/{{ .Values.image.repository }}:app-{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.service.targetPort }}
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /api/health
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /api/health
              port: http
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3
          env:
            - name: DATABASE_URL
              value: {{ include "contextstream.database.url" . }}
            - name: REDIS_URL
              value: {{ include "contextstream.redis.url" . }}
            - name: PORT
              value: "{{ .Values.service.targetPort }}"
          envFrom:
            - configMapRef:
                name: {{ include "contextstream.fullname" . }}
            - secretRef:
                name: {{ include "contextstream.fullname" . }}
          resources:
            {{- toYaml .Values.resources.app | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
