version: '3.8'

services:
  # PostgreSQL with pgvector extension
  postgres:
    image: pgvector/pgvector:pg16
    container_name: contextstream-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-contextstream}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
      POSTGRES_DB: ${POSTGRES_DB:-contextstream}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-contextstream}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - contextstream-network

  # Redis for job queues and caching
  redis:
    image: redis:7-alpine
    container_name: contextstream-redis
    restart: unless-stopped
    command: >
      sh -c "
        if [ -n \"$$REDIS_PASSWORD\" ]; then
          redis-server --appendonly yes --requirepass $$REDIS_PASSWORD
        else
          redis-server --appendonly yes
        fi
      "
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: >
        sh -c "
          if [ -n \"$$REDIS_PASSWORD\" ]; then
            redis-cli -a $$REDIS_PASSWORD ping
          else
            redis-cli ping
          fi
        "
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - contextstream-network

  # Next.js Application
  app:
    image: ${DOCKER_REGISTRY:-jimseiwert}/context-stream:app-${VERSION:-latest}
    container_name: contextstream-app
    restart: unless-stopped
    build:
      context: .
      dockerfile: Dockerfile.app
    environment:
      NODE_ENV: production
      DATABASE_URL: ${DATABASE_URL:-postgresql://${POSTGRES_USER:-contextstream}:${POSTGRES_PASSWORD:-changeme}@postgres:5432/${POSTGRES_DB:-contextstream}}
      REDIS_URL: ${REDIS_URL:-redis://${REDIS_PASSWORD:+:${REDIS_PASSWORD}@}redis:6379}
      NEXTAUTH_URL: ${NEXTAUTH_URL:-http://localhost:3000}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      BETTER_AUTH_SECRET: ${BETTER_AUTH_SECRET}
      BETTER_AUTH_URL: ${BETTER_AUTH_URL:-http://localhost:3000}
      GITHUB_CLIENT_ID: ${GITHUB_CLIENT_ID:-}
      GITHUB_CLIENT_SECRET: ${GITHUB_CLIENT_SECRET:-}
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID:-}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET:-}
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY:-}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET:-}
    ports:
      - "${APP_PORT:-3000}:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - contextstream-network

  # Background Worker
  worker:
    image: ${DOCKER_REGISTRY:-jimseiwert}/context-stream:worker-${VERSION:-latest}
    container_name: contextstream-worker
    restart: unless-stopped
    build:
      context: .
      dockerfile: Dockerfile.worker
    environment:
      NODE_ENV: production
      DATABASE_URL: ${DATABASE_URL:-postgresql://${POSTGRES_USER:-contextstream}:${POSTGRES_PASSWORD:-changeme}@postgres:5432/${POSTGRES_DB:-contextstream}}
      REDIS_URL: ${REDIS_URL:-redis://${REDIS_PASSWORD:+:${REDIS_PASSWORD}@}redis:6379}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      NODE_OPTIONS: "--max-old-space-size=2048"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - contextstream-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  contextstream-network:
    driver: bridge
